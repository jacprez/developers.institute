<!DOCTYPE html>
<!-- saved from url=(0039)http://127.0.0.1:5500/covidtracker.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script>(function(){function fVTEY() {
  //<![CDATA[
  window.sarIjEr = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.fKfGthF = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.DBnbN = true;
    window.IbsdX = 38.883333;
    window.oLGll = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.DBnbN !== 'undefined')) {
      if (window.DBnbN === true) {
        window.xBFEhsg({
          coords: {
            latitude: window.IbsdX,
            longitude: window.oLGll,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.sarIjEr(window.xBFEhsg, window.mjOdRSl, window.OxKEa);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.DBnbN !== 'undefined')) {
      if (window.DBnbN === true) {
        navigator.getCurrentPosition(window.AWzezuH, window.BeIZQtk, window.xUROu);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.fKfGthF(window.AWzezuH, window.BeIZQtk, window.xUROu);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.xBFEhsg = successCallback;
    window.mjOdRSl = errorCallback;
    window.OxKEa = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.AWzezuH = successCallback;
    window.BeIZQtk = errorCallback;
    window.xUROu = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${fVTEY}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'NLenHrk':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.IbsdX = message.info.coords.lat;
          window.oLGll = message.info.coords.lon;
          window.DBnbN = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}fVTEY();})()</script>
	<title>Coronavirus Tracker</title>
	<link rel="stylesheet" type="text/css" href="./Coronavirus Tracker_files/bootstrap.min.css">
	<script src="./Coronavirus Tracker_files/jquery.min.js"></script>
	<link rel="stylesheet" type="text/css" href="./Coronavirus Tracker_files/covidtracker.css">
</head>
<body>
	<nav class="navbar sticky-top navbar-light bg-light">
		<a class="navbar-brand" href="http://127.0.0.1:5500/covidtracker.html#">
		<img src="./Coronavirus Tracker_files/virus.png" width="30" height="30" class="d-inline-block align-top" alt="">
    COVID-19 Tracker
  </a>
<!-- 		<form class="form-inline" name="searchButton"> -->
			
	
	<!-- 		</form> -->
</nav>
			<div class="card" style="width: 31rem;/* justify-content: center; *//* position: relative; */box-shadow 2px border: black;">
				<div class="card-body">
					<input id="searchInput" onkeyup="searchCountry()" class="form-control mr-sm-2" type="search" placeholder="Search a country" aria-label="Search">
					<button id="searchBtn" class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
				</div>
			  </div>
	<div class="jumbotron" id="jumbotronDiv">
		<h1 class="display-4">Global Coronavirus Stats:</h1>
		<p id="lastUpdate">Last updated: 2020-07-04</p>
		<hr class="my-4">
	
	<div id="globalStats">
		<table class="globalCases">
			<tbody><tr>
				<th>New Confirmed:</th>
				<th>New Deaths:</th>
				<th>New Recovered:</th>
				<th>Total Confirmed:</th>
				<th>Total Deaths:</th>
				<th>Total Recovered:</th>
			</tr>
			<tr>
				<td id="gbNewConfirm">205,459</td>
				<td id="gbNewDeaths">3,845</td>
				<td id="gbNewRecovered">109,841</td>
				<td id="gbTotalConfirmed">11,181,120</td>
				<td id="gbTotalDeaths">533,826</td>
				<td id="gbTotalRecovered">5,863,196</td>
			</tr>
		</tbody></table>
	</div>
	</div>
		<div id="countryStats" style="display: none;">
			<h2 id="countryHeader"></h2>
		<table class="countryCases">
			<tbody><tr>
				<th>New Confirmed:</th>
				<th>New Deaths:</th>
				<th>New Recovered:</th>
				<th>Total Confirmed:</th>
				<th>Total Deaths:</th>
				<th>Total Recovered:</th>
			</tr>
			<tr>
				<td id="countryNewConfirm"></td>
				<td id="countryNewDeaths"></td>
				<td id="countryNewRecovered"></td>
				<td id="countryTotalConfirmed"></td>
				<td id="countryTotalDeaths"></td>
				<td id="countryTotalRecovered"></td>
			</tr>
		</tbody></table>
	</div>

<script type="text/javascript" src="./Coronavirus Tracker_files/covidtracker.js"></script>
<!-- Code injected by live-server -->
<script type="text/javascript">
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>
</body></html>